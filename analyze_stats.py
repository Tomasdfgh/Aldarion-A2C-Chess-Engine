#!/usr/bin/env python3
"""
Training Statistics Analyzer and Dashboard

Analyzes and visualizes the stats.pkl file generated by parallel training data collection.
Provides insights into performance, resource utilization, and data quality.
"""

import pickle
import argparse
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path

def load_stats(stats_file):
    """Load stats from pickle file"""
    with open(stats_file, 'rb') as f:
        return pickle.load(f)

def create_stats_dataframe(stats_data):
    """Convert stats list to pandas DataFrame for easier analysis"""
    return pd.DataFrame(stats_data)

def print_summary(df):
    """Print overall summary statistics"""
    print("="*60)
    print("TRAINING DATA GENERATION SUMMARY")
    print("="*60)
    
    # Overall totals
    total_processes = len(df)
    total_games = df['games_completed'].sum()
    total_examples = df['training_examples'].sum()
    total_time = df['total_time_seconds'].max()  # Max since processes run in parallel
    
    print(f"Total Processes: {total_processes}")
    print(f"Total Games Completed: {total_games:,}")
    print(f"Total Training Examples: {total_examples:,}")
    print(f"Total Runtime: {total_time/3600:.2f} hours")
    print(f"Overall Games/Hour: {total_games / (total_time/3600):.1f}")
    print(f"Overall Examples/Hour: {total_examples / (total_time/3600):,.0f}")
    
    # GPU distribution
    gpu_counts = df['gpu_device'].value_counts()
    print(f"\nGPU Distribution:")
    for gpu, count in gpu_counts.items():
        gpu_games = df[df['gpu_device'] == gpu]['games_completed'].sum()
        gpu_examples = df[df['gpu_device'] == gpu]['training_examples'].sum()
        print(f"  {gpu}: {count} processes, {gpu_games:,} games, {gpu_examples:,} examples")
    
    # Performance stats
    print(f"\nPerformance Stats:")
    print(f"  Average Games/Process: {df['games_completed'].mean():.1f}")
    print(f"  Average Examples/Process: {df['training_examples'].mean():,.0f}")
    print(f"  Average Game Length: {df['game_length_stats'].apply(lambda x: x['average']).mean():.1f} moves")
    
    # Game outcomes
    total_white_wins = sum(d['white_wins'] for d in df['game_outcomes'])
    total_black_wins = sum(d['black_wins'] for d in df['game_outcomes'])
    total_draws = sum(d['draws'] for d in df['game_outcomes'])
    
    print(f"\nGame Outcomes:")
    print(f"  White Wins: {total_white_wins} ({total_white_wins/total_games*100:.1f}%)")
    print(f"  Black Wins: {total_black_wins} ({total_black_wins/total_games*100:.1f}%)")
    print(f"  Draws: {total_draws} ({total_draws/total_games*100:.1f}%)")

def plot_performance_analysis(df, save_dir="."):
    """Create comprehensive performance visualization"""
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('Training Data Generation Performance Analysis', fontsize=16)
    
    # 1. Games completed per process
    axes[0, 0].bar(df['process_id'], df['games_completed'], color='skyblue')
    axes[0, 0].set_title('Games Completed per Process')
    axes[0, 0].set_xlabel('Process ID')
    axes[0, 0].set_ylabel('Games Completed')
    axes[0, 0].tick_params(axis='x', rotation=45)
    
    # 2. Training examples per process
    axes[0, 1].bar(df['process_id'], df['training_examples'], color='lightgreen')
    axes[0, 1].set_title('Training Examples per Process')
    axes[0, 1].set_xlabel('Process ID')
    axes[0, 1].set_ylabel('Training Examples')
    axes[0, 1].tick_params(axis='x', rotation=45)
    
    # 3. Games per minute by GPU
    gpu_performance = df.groupby('gpu_device').agg({
        'games_per_minute': 'mean',
        'examples_per_minute': 'mean'
    })
    
    x = range(len(gpu_performance))
    width = 0.35
    axes[0, 2].bar([i - width/2 for i in x], gpu_performance['games_per_minute'], 
                   width, label='Games/min', color='orange')
    axes[0, 2].set_title('Average Performance by GPU')
    axes[0, 2].set_xlabel('GPU Device')
    axes[0, 2].set_ylabel('Games per Minute')
    axes[0, 2].set_xticks(x)
    axes[0, 2].set_xticklabels(gpu_performance.index)
    axes[0, 2].legend()
    
    # 4. Game length distribution
    game_lengths = [d['average'] for d in df['game_length_stats']]
    axes[1, 0].hist(game_lengths, bins=20, color='purple', alpha=0.7)
    axes[1, 0].set_title('Game Length Distribution')
    axes[1, 0].set_xlabel('Average Game Length (moves)')
    axes[1, 0].set_ylabel('Frequency')
    axes[1, 0].axvline(np.mean(game_lengths), color='red', linestyle='--', 
                       label=f'Mean: {np.mean(game_lengths):.1f}')
    axes[1, 0].legend()
    
    # 5. Outcome distribution pie chart
    total_white_wins = sum(d['white_wins'] for d in df['game_outcomes'])
    total_black_wins = sum(d['black_wins'] for d in df['game_outcomes'])
    total_draws = sum(d['draws'] for d in df['game_outcomes'])
    
    outcomes = [total_white_wins, total_black_wins, total_draws]
    labels = ['White Wins', 'Black Wins', 'Draws']
    colors = ['lightcoral', 'lightblue', 'lightgray']
    
    axes[1, 1].pie(outcomes, labels=labels, colors=colors, autopct='%1.1f%%')
    axes[1, 1].set_title('Game Outcome Distribution')
    
    # 6. Process efficiency (examples per second)
    df['examples_per_second'] = df['training_examples'] / df['total_time_seconds']
    axes[1, 2].scatter(df['process_id'], df['examples_per_second'], 
                       c=df['gpu_device'].map({'cuda:0': 'red', 'cuda:1': 'blue'}),
                       alpha=0.7, s=60)
    axes[1, 2].set_title('Process Efficiency')
    axes[1, 2].set_xlabel('Process ID')
    axes[1, 2].set_ylabel('Examples per Second')
    axes[1, 2].legend(['GPU 0', 'GPU 1'])
    
    plt.tight_layout()
    
    # Save plot
    save_path = Path(save_dir) / "training_stats_analysis.png"
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Performance analysis saved to {save_path}")
    plt.show()

def create_detailed_report(df, save_dir="."):
    """Create a detailed text report"""
    report_path = Path(save_dir) / "training_stats_report.txt"
    
    with open(report_path, 'w') as f:
        f.write("TRAINING DATA GENERATION - DETAILED REPORT\n")
        f.write("="*50 + "\n")
        f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        # Process-by-process breakdown
        f.write("PROCESS BREAKDOWN:\n")
        f.write("-" * 20 + "\n")
        for _, row in df.iterrows():
            f.write(f"Process {row['process_id']} ({row['gpu_device']}):\n")
            f.write(f"  Games: {row['games_completed']:,}\n")
            f.write(f"  Examples: {row['training_examples']:,}\n")
            f.write(f"  Runtime: {row['total_time_seconds']/3600:.2f} hours\n")
            f.write(f"  Rate: {row['games_per_minute']:.2f} games/min\n")
            f.write(f"  Avg Game Length: {row['game_length_stats']['average']:.1f} moves\n")
            outcomes = row['game_outcomes']
            total_outcomes = outcomes['white_wins'] + outcomes['black_wins'] + outcomes['draws']
            if total_outcomes > 0:
                f.write(f"  Outcomes: W:{outcomes['white_wins']} B:{outcomes['black_wins']} D:{outcomes['draws']}\n")
            f.write("\n")
        
        # Performance analysis
        f.write("PERFORMANCE ANALYSIS:\n")
        f.write("-" * 20 + "\n")
        f.write(f"Fastest Process: Process {df.loc[df['games_per_minute'].idxmax(), 'process_id']} ")
        f.write(f"({df['games_per_minute'].max():.2f} games/min)\n")
        f.write(f"Slowest Process: Process {df.loc[df['games_per_minute'].idxmin(), 'process_id']} ")
        f.write(f"({df['games_per_minute'].min():.2f} games/min)\n")
        f.write(f"Performance Std Dev: {df['games_per_minute'].std():.2f} games/min\n\n")
        
        # Resource utilization
        gpu_stats = df.groupby('gpu_device').agg({
            'games_completed': 'sum',
            'training_examples': 'sum',
            'games_per_minute': 'mean'
        })
        
        f.write("GPU UTILIZATION:\n")
        f.write("-" * 20 + "\n")
        for gpu, stats in gpu_stats.iterrows():
            f.write(f"{gpu}:\n")
            f.write(f"  Total Games: {stats['games_completed']:,}\n")
            f.write(f"  Total Examples: {stats['training_examples']:,}\n")
            f.write(f"  Avg Rate: {stats['games_per_minute']:.2f} games/min\n\n")
    
    print(f"Detailed report saved to {report_path}")

def main():
    parser = argparse.ArgumentParser(
        description='Analyze training data generation statistics',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Basic analysis
  python3 analyze_stats.py parallel_training_data_20250914_044552_stats.pkl
  
  # Generate plots and reports
  python3 analyze_stats.py stats.pkl --plot --report
  
  # Save outputs to specific directory
  python3 analyze_stats.py stats.pkl --plot --report --output_dir ./analysis
        """
    )
    
    parser.add_argument('stats_file', help='Path to stats pickle file')
    parser.add_argument('--plot', action='store_true', 
                       help='Generate performance visualization plots')
    parser.add_argument('--report', action='store_true',
                       help='Generate detailed text report')
    parser.add_argument('--output_dir', default='.',
                       help='Output directory for plots and reports')
    
    args = parser.parse_args()
    
    # Load and process data
    print(f"Loading stats from {args.stats_file}...")
    stats_data = load_stats(args.stats_file)
    df = create_stats_dataframe(stats_data)
    
    # Print summary
    print_summary(df)
    
    # Generate plots if requested
    if args.plot:
        print(f"\nGenerating performance plots...")
        plot_performance_analysis(df, args.output_dir)
    
    # Generate report if requested  
    if args.report:
        print(f"\nGenerating detailed report...")
        create_detailed_report(df, args.output_dir)
    
    print("\nAnalysis complete!")

if __name__ == "__main__":
    main()